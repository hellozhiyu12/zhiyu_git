<?xml version="1.0" encoding="UTF8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--接口代理方式：namespace:名称空间，该值是mapper接口的全路径-->
<mapper namespace="cn.bdqn.mapper.EmployeeMapper">

    <!--  自定义属性映射  -->
<!--    <resultMap id="EmployeeResultMap" type="cn.bdqn.domain.Employee">-->
<!--        <result property="empName" column="emp_name"/>-->
<!--    </resultMap>-->

    <!--    根据员工名和和性别查询员工  -->
    <!--    emp_name = #{empName} and sex = #{sex}需要修改Mapper接口中方法的定义  -->
    <!--    emp_name = #{arg0} and sex = #{arg1}对  -->
    <!--    emp_name = #{param1} and sex = #{param2}对  -->
    <select id="queryByNameAndSex" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name empName,sex,email,birthday,address
        from
            t_employee
        where
            emp_name = #{empName} and sex = #{sex}
    </select>

    <!--    根据员工id查询员工  -->
    <resultMap id="EmployeeResultMap" type="cn.bdqn.domain.Employee">
        <!--    映射主键    -->
        <id column="id" property="id" />
        <!--    映射普通属性  -->

        <!--
            使用association定义关联的单个对象的映射规则,可以指定Employee对象关联的是哪个实体对象 。
             property="dept"：指定哪个属性是Employee的关联对象
		     select：表示的是dept这个属性的值是通过调用哪一个查询语句给赋值的
	 		 column：指定将哪一列的值传给这个方法.
			 流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，
				   并封装给property指定的属性
        -->
        <association property="dept"
                     select="cn.bdqn.mapper.DeptMapper.queryById"
                     column="dept_id">
        </association>
    </resultMap>

    <!--  根据员工id查询员工信息【单表查询】  -->
    <select id="queryById" resultMap="EmployeeResultMap">
        SELECT
            id, sex, emp_name,email,dept_id,birthday,address,dept_id
        FROM
            t_employee
        WHERE
            id = #{id};
    </select>
<!--    &lt;!&ndash;-->
<!--            自定义映射规则[高级映射]-->
<!--            type：自定义规则的JavaBean类型-->
<!--	        id:为这个自定义映射规则起一个唯一的名字，方便以后使用-->
<!--     &ndash;&gt;-->
<!--    <resultMap id="EmployeeResultMap" type="cn.bdqn.domain.Employee">-->
<!--        &lt;!&ndash; 映射主键  &ndash;&gt;-->
<!--        <id column="id" property="id"/>-->
<!--        &lt;!&ndash; 定义普通列的映射 column：指定哪一列      property：指定对应的javaBean属性  &ndash;&gt;-->
<!--        <result column="emp_name" property="empName"/>-->
<!--        <result column="email" property="email"/>-->
<!--    </resultMap>-->


<!--    <select id="queryById" resultMap="EmployeeResultMap">-->
<!--        select-->
<!--            id,emp_name,sex,email,birthday,address-->
<!--        from-->
<!--            t_employee-->
<!--        where-->
<!--            id = #{id}-->
<!--    </select>-->
    <!--    添加员工   -->
    <insert id="save" parameterType="cn.bdqn.domain.Employee">
        insert into t_employee(emp_name, sex, email, birthday, address)
        values (#{empName}, #{sex}, #{email}, #{birthday}, #{address})
    </insert>

    <!--    根据员工姓名模糊查询所有员工  -->
    <select id="queryEmployeesByName" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name empName,sex,email,birthday,address
        from
            t_employee
        where
            emp_name like #{empName}
    </select>

    <!--
           根据姓名模糊查询员工列表，返回的值是一个Map<Integer,Employee>
           Map的key是这条记录的主键，值是记录封装后的Employee对象。
   -->
    <select id="queryByName" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name,sex,email,birthday,address
        from
            t_employee
        where
            emp_name like #{empName}
    </select>

    <!--  根据员工姓名、邮箱、家庭住址、性别模糊查询员工信息  -->
    <select id="queryByCondition" resultType="cn.bdqn.domain.Employee">
        SELECT
        id, sex, emp_name as empName ,email,birthday,address
        FROM
        t_employee
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name like concat('%',#{empName},'%')
                </when>
                <when test="email != null and email != ''">
                    email like concat('%',#{email} , '%')
                </when>
                <otherwise>
                    sex = '女'
                </otherwise>
            </choose>
        </where >
    </select>


</mapper>
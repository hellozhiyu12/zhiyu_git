<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:aop="">
    <!--  1、注册UserServiceImpl这个Bean  -->
    <bean id="userService" class="cn.bdqn.service.UserServiceImpl"/>

    <!--  2、以下操作都是Spring基于XML的AOP配置步骤
       2.1 把通知/增强Bean也需要注册到Spring容器中
       2.2 使用<aop:config/>标签来去声明开始AOP的配置了
       2.3 使用<aop:aspect/>标签来去表示开始配置切面了
        可以想一下：既然要配置切面，那切面就是切入点和通知的结合，所以肯定需要配置切入点和通知这两部分
              id属性：是给切面提供一个唯一标识
              ref属性：是指定通知类bean的Id。
       2.4 在<aop:aspect/>标签的内部使用对应标签来配置通知的类型
              前置通知/后置通知/异常通知/最终通知
              需求:beforePrintLog方法在切入点方法执行之前之前：所以是前置通知
              前置通知：<aop:before/>
                  method属性：用于指定Logger类中哪个方法是前置通知
                  pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

          3、切入点表达式的写法：
                关键字：execution(表达式)
                表达式：
                    访问修饰符  方法返回值  包名1.包名2...类名.方法名(参数列表)
                需求：
                    我现在就想对UserServiceImpl类中的queryAll方法进行拦截
                    public java.util.List cn.bdqn.service.UserServiceImpl.queryAll()
    -->

    <!--  2.1 把通知/增强Bean也需要注册到Spring容器中  -->
    <bean id="logger" class="cn.bdqn.advice.Logger"/>
    <!--  2.2 使用此标签来去声明开始AOP的配置了-->
    <aop:config>
        <!--配置切面 -->
        <aop:aspect id="loggerAdvice" ref="logger">
            <!-- 配置通知的类型，并且建立增强方法和切入点方法的关联-->
            <aop:before method="beforePrintLog"
                        pointcut="execution(public java.util.List cn.bdqn.service.UserServiceImpl.queryAll())"/>
        </aop:aspect>
    </aop:config>
</beans>
